## itertools (from itertools import * ) ##


## Usage of lambda ##

S=map(lambda t: sum(i**2 for i in t)%m, product(*L))
where L is a list

## list comprehension ##

[f(x) for x in sequence if condition]
[f(x) if condition else g(x) for x in sequence]
[unicode(x.strip()) if x is not None else '' for x in row]

## Collections (from collections import *) ##

-- defaultdict

from collections import defaultdict
d = defaultdict(list)
d['python'].append("awesome")
d['something-else'].append("not relevant")
d['python'].append("language")
for i in d.items():
    print i
    
This prints:

('python', ['awesome', 'language'])
('something-else', ['not relevant'])

-- Sample program

from collections import *

dA = defaultdict(list)
Na,Nb=map(int,input().split())
[dA[input().strip()].append(i) for i in range(1,Na+1)]
B=[input().strip() for i in range(1,Nb+1)]

for char in B:
    l=(dA[char] if dA[char] else [-1])
    print(*l)

Input - 
5 3
a
a
b
a
b
a
b
c

Output - 
1 2 4
3 5
-1

-- namedtuple

Basically, namedtuples are easy to create, lightweight object types.
They turn tuples into convenient containers for simple tasks.
With namedtuples, you donâ€™t have to use integer indices for accessing members of a tuple. Typical use case is handling spreadsheet data.

Code 01
>>> from collections import namedtuple
>>> Point = namedtuple('Point','x,y')
>>> pt1 = Point(1,2)
>>> pt2 = Point(3,4)
>>> dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )
>>> print dot_product
11

Code 02
>>> from collections import namedtuple
>>> Car = namedtuple('Car','Price Mileage Colour Class')
>>> xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')
>>> print xyz
Car(Price=100000, Mileage=30, Colour='Cyan', Class='Y')
>>> print xyz.Class
Y

-- Sample program

from collections import namedtuple

N=int(input())
Students = namedtuple('Students',",".join(input().split()))
print(format(sum([int(Students._make(input().split()).MARKS) for i in range(N)])/N,".2f"))

Input -
5
ID         MARKS      NAME       CLASS     
1          97         Raymond    7         
2          50         Steven     4         
3          91         Adrian     9         
4          72         Stewart    5         
5          80         Peter      6   

5
MARKS      CLASS      NAME       ID        
92         2          Calum      1         
82         5          Scott      2         
94         2          Jason      3         
55         8          Glenn      4         
82         2          Fergus     5

Output -
78.00
81.00
