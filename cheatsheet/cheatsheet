## string , integer formatting ##

https://www.geeksforgeeks.org/python-format-function/
print("{:.0f}".format(3/1)) --> 3

print("%.2f+%i+%.3fi" % (2,4,6,..)) -->  2.00+4+6.000i

## sorting list based on item position ##
from operator import itemgetter, attrgetter

sorted(student_tuples, key=itemgetter(2))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]
sorted(student_objects, key=attrgetter('age'))
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]

--Sample program

from operator import itemgetter, attrgetter

N,M=map(int,input().split())
ath=[]
for _ in range(N):
    ath.append(list(map(int,input().split())))
k=int(input())
for i in sorted(ath,key=itemgetter(k)):
    print(*i)
    
Input --

5 3
10 2 5
7 1 0
9 9 9
1 23 12
6 5 9
1

Output --

7 1 0
10 2 5
6 5 9
9 9 9
1 23 12

## getattr method ##

This is used to call attributes for the given object
syntax --> getattr(obj,attribute,default)

For example:
getattr(Student,"Student_gpa","3.0") --> Student.Student_gpa
getattr(d,cmd)(*(map(int,arg))) --> d.append(1) or d.append(2,3)

-- Sample program

n=int(input())
if n > 0 and n < 20:
    s=set(map(int,(input().split()) ) )
    N=int(input())
    for i in range(N):
        command, *args = input().split()
        getattr(s,command)(*map(int,args))

    print(sum(s))
    
Input --

9
1 2 3 4 5 6 7 8 9
10
pop
remove 9
discard 9
discard 8
remove 7
pop 
discard 6
remove 5
pop 
discard 5

OutPut --

4

## itertools (from itertools import * ) ##


## Usage of lambda ##

S=map(lambda t: sum(i**2 for i in t)%m, product(*L))
where L is a list

## list comprehension ##

[f(x) for x in sequence if condition]
[f(x) if condition else g(x) for x in sequence]
[unicode(x.strip()) if x is not None else '' for x in row]

## Collections (from collections import *) ##

-- counter

A counter is a container that stores elements as dictionary keys, and their counts are stored as dictionary values.

>>> from collections import Counter
>>> 
>>> myList = [1,1,2,3,4,5,3,2,3,4,2,1,2,3]
>>> print Counter(myList)
Counter({2: 4, 3: 4, 1: 3, 4: 2, 5: 1})
>>>
>>> print Counter(myList).items()
[(1, 3), (2, 4), (3, 4), (4, 2), (5, 1)]
>>> 
>>> print Counter(myList).keys()
[1, 2, 3, 4, 5]
>>> 
>>> print Counter(myList).values()
[3, 4, 4, 2, 1]


-- defaultdict

from collections import defaultdict
d = defaultdict(list)
d['python'].append("awesome")
d['something-else'].append("not relevant")
d['python'].append("language")
for i in d.items():
    print i
    
This prints:

('python', ['awesome', 'language'])
('something-else', ['not relevant'])

-- Sample program

from collections import *

dA = defaultdict(list)
Na,Nb=map(int,input().split())
[dA[input().strip()].append(i) for i in range(1,Na+1)]
B=[input().strip() for i in range(1,Nb+1)]

for char in B:
    l=(dA[char] if dA[char] else [-1])
    print(*l)

Input - 
5 3
a
a
b
a
b
a
b
c

Output - 
1 2 4
3 5
-1

-- namedtuple

Basically, namedtuples are easy to create, lightweight object types.
They turn tuples into convenient containers for simple tasks.
With namedtuples, you donâ€™t have to use integer indices for accessing members of a tuple. Typical use case is handling spreadsheet data.

Code 01
>>> from collections import namedtuple
>>> Point = namedtuple('Point','x,y')
>>> pt1 = Point(1,2)
>>> pt2 = Point(3,4)
>>> dot_product = ( pt1.x * pt2.x ) +( pt1.y * pt2.y )
>>> print dot_product
11

Code 02
>>> from collections import namedtuple
>>> Car = namedtuple('Car','Price Mileage Colour Class')
>>> xyz = Car(Price = 100000, Mileage = 30, Colour = 'Cyan', Class = 'Y')
>>> print xyz
Car(Price=100000, Mileage=30, Colour='Cyan', Class='Y')
>>> print xyz.Class
Y

-- Sample program

from collections import namedtuple

N=int(input())
Students = namedtuple('Students',",".join(input().split()))
print(format(sum([int(Students._make(input().split()).MARKS) for i in range(N)])/N,".2f"))

Input -
5
ID         MARKS      NAME       CLASS     
1          97         Raymond    7         
2          50         Steven     4         
3          91         Adrian     9         
4          72         Stewart    5         
5          80         Peter      6   

5
MARKS      CLASS      NAME       ID        
92         2          Calum      1         
82         5          Scott      2         
94         2          Jason      3         
55         8          Glenn      4         
82         2          Fergus     5

Output -
78.00
81.00

## Decorators ##
https://www.geeksforgeeks.org/decorators-in-python/

-- Sample program 

import re

def wrapper(f):
    def fun(l):
        m = [ "+91"+ " " + i[len(i)-10:len(i)-5] + " " + i[len(i)-5:] for i in l if re.match(r'^\+?\d+$',i)]
        f(m)  # this will call sort_phone func
    return fun

@wrapper  # sort_phone = wrapper(sort_phone(l)); # sort_phone = fun
def sort_phone(l):
    print(*sorted(l), sep='\n')

if __name__ == '__main__':
    l = [input() for _ in range(int(input()))]
    sort_phone(l)  # sort_phone(l) = fun(l)
    

input -
8
07895462130
919875641230
9195969878ty
+919596987845
/9195969878345
45689024567
7845120369
9198785623

output -
+91 56890 24567
+91 78451 20369
+91 78954 62130
+91 91987 85623
+91 95969 87845
+91 98756 41230


## time,date and formatting ##

good read .. https://www.guru99.com/date-time-and-datetime-classes-in-python.html

t = datetime.strptime(s,'%I:%M:%S%p') --> this will convert string into datetime object
t.strftime("%H:%M:%S") --> this will do the formatting (from 12hr to 24hour format)

#Times and dates can be formatted using a set of predefined string
#Control codes
now= datetime.now() #get the current date and time
#%c - local date and time, %x-local's date, %X- local's time
print(now.strftime("%c"))
print(now.strftime("%x"))
print(now.strftime("%X"))
##### Time Formatting ####
#%I/%H - 12/24 Hour, %M - minute, %S - second, %p - local's AM/PM
print(now.strftime("%I:%M:%S %p")) # 12-Hour:Minute:Second:AM
print(now.strftime("%H:%M")) # 24-Hour:Minute
